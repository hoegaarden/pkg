#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:assert", "assert")

#@ if data.values.htpasswd == "":
#@   assert.fail('httpasswd should not be empty, but at least hold one user/password pair')
#@ end

---
apiVersion: v1
kind: Secret
metadata:
  name: prom-proxy-htpasswd
  labels:
    app: prom-proxy
data:
  htpasswd: #@ base64.encode(data.values.htpasswd)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prom-proxy
  labels:
    app: prom-proxy
spec:
  replicas: #@ data.values.replicas
  selector:
    matchLabels:
      app: prom-proxy
  template:
    metadata:
      labels:
        app: prom-proxy
    spec:
      containers:
      - image: #@ data.values.image
        name: prom-proxy
        volumeMounts:
        - name: conf-d
          mountPath: /etc/nginx/conf.d/
        - name: htpasswd
          mountPath: /etc/nginx/.htpasswd
          subPath: htpasswd
        resources: #@ data.values.resources
      volumes:
      - name: htpasswd
        secret:
          secretName: prom-proxy-htpasswd
      - name: conf-d
        configMap:
          name: prom-proxy-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prom-proxy-config
  labels:
    app: prom-proxy
data:
  #@yaml/text-templated-strings
  server.conf: |
    server {
      listen       8080;
      server_name  _;

      location / {
        proxy_pass (@= data.values.upstream @);
        auth_basic "Login";
        auth_basic_user_file ".htpasswd";
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: prom-proxy
  labels:
    app: prom-proxy
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: prom-proxy
  type: ClusterIP
